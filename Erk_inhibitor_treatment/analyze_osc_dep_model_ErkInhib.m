% This function loads the data generated by osc_dep_model_ErkInhib.m scripts for xx = 0:100
% and determines the time it takes for the next wave to form following Erk inhibitor treatment

clear data_store
data_store = cell(101,1);
for i = 0:100
    if (exist(sprintf('osc_dep_ErkInhib_%d.txt',i), 'file') == 2)
        data_store{i+1} = importdata(sprintf('osc_dep_ErkInhib_%d.txt',i));
    end
    i
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

tprint = 0.1;
tlength = 150;
tvals = 0:tprint:tlength;
washout_duration = 10;

treatment_times = 0:numel(data_store)-1;
next_wave_times = NaN(numel(data_store),1);
for i = 1:numel(data_store)
    [pks_s,locs_s] = findpeaks(data_store{i}((treatment_times(i)+washout_duration)/tprint:end,1),tvals((treatment_times(i)+washout_duration)/tprint:end),'MinPeakProminence',0.2);
    [pks_o,locs_o] = findpeaks(data_store{i}((treatment_times(i)+washout_duration)/tprint:end,2),tvals((treatment_times(i)+washout_duration)/tprint:end),'MinPeakProminence',0.2);
        if (locs_o(1)-locs_s(1) < 20)
            next_wave_times(i) = locs_s(1);
        end
end

fig = figure;
yvals = next_wave_times - treatment_times';
plot(treatment_times(1:1:end), yvals(1:1:end),'-','LineWidth',3);
axis([0 100 0 35])
xlabel('Treatment time (h)','FontSize',36) % x-axis label
ylabel('Time until next wave (h)','FontSize',36) % y-axis label
legend off
standardizePlot(gcf,gca,strcat('osc_treatment_vs_nextwave'));
close(fig);

